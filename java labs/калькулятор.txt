import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Scanner;

public class Main {
    static int count(int array[] , int length) {
        int i = 1;
        int step = 1;
        int sum = 0;
        while (length > i)
        {
            step *= 10;
            i++;
        }
        i = 0;
        while (i <= length - 1)
        {
            sum = sum + array[i] * step;
            step /= 10; i++;

        }
        return sum;
    }
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.nextLine();
        System.out.println("Expression:");
        System.out.println(s);
        ArrayList<Character> stack = new ArrayList();
        ArrayList<Character> reversPolishNotantion = new ArrayList();
        HashMap<Character,Integer> precedence = new HashMap<Character,Integer>();
        precedence.put('(',1);
        precedence.put('*',3);
        precedence.put('/',3);
        precedence.put('+',2);
        precedence.put('-',2);
        int i = 0;
        while(i < s.length()){
            if (s.charAt(i) >= '0' && s.charAt(i) <= '9'){
                while(s.charAt(i) >= '0' && s.charAt(i) <= '9'){
                    reversPolishNotantion.add(s.charAt(i));

                    i++;
                    if (s.length()==i)break;
                }
                reversPolishNotantion.add(' ');
                if (s.length()==i)break;
                continue;
            }else {
                if (s.charAt(i)=='('){
                    stack.add(s.charAt(i));
                    i++;
                    continue;
                }
                if (s.charAt(i) == ')'){
                    while(stack.get(stack.size()-1) != '('){
                        reversPolishNotantion.add(stack.remove(stack.size()-1));
                        reversPolishNotantion.add(' ');
                    }
                    stack.remove(stack.size()-1);
                    i++;
                    continue;

                }
                if (!stack.isEmpty()&&s.charAt(i) != ')'){
                if (precedence.get(s.charAt(i))<=precedence.get(stack.get(stack.size()-1))&&stack.get(stack.size()-1)!='('){



                    while ((precedence.get(s.charAt(i))<=precedence.get(stack.get(stack.size()-1)))&&stack.get(stack.size()-1)!='('){
                        reversPolishNotantion.add((char) stack.get(stack.size()-1));
                        reversPolishNotantion.add(' ');
                        stack.remove(stack.size()-1);
                        if (stack.isEmpty())break;
                    }
                }}
                if ((stack.isEmpty()||((precedence.get(s.charAt(i))) > precedence.get(stack.get(stack.size()-1)))||stack.get(stack.size()-1)=='(')&&s.charAt(i) != ')'){
                    stack.add(s.charAt(i));




                }


            }
            i++;
        }
        while(!stack.isEmpty()) {
            reversPolishNotantion.add((char) stack.get(stack.size()-1));
            reversPolishNotantion.add(' ');
            stack.remove(stack.size()-1);
        }
        System.out.println("Reverse Polish Notation:");
        for (int l = 0; l < reversPolishNotantion.size(); l++) {
            System.out.print(reversPolishNotantion.get(l));
        }
        System.out.println("\nResult:");
        System.out.println(calculate(reversPolishNotantion));


}
public static int calculate(ArrayList<Character> list){
        ArrayList<Integer> qew = new ArrayList<>();
        int[] number = new int[list.size()];
        int end = 0;
        int start = 0;
        int j = 0;
    for (int i = 0; i < list.size()-1; i++) {
        start = i;
        j = 0;
        end = start;
        if (list.get(i)<='9'&&list.get(i)>='0'){
        while (list.get(i)<='9'&&list.get(i)>='0') {
            number[j] = (char) (list.get(i)-'0');
            end++;
            j++;
            i++;
        }

        qew.add(count(number,end-start));

        }else {
            if (list.get(i) == '-'){
                qew.add(qew.remove(qew.size()-2)-qew.remove(qew.size()-1));
            }
            else if (list.get(i) == '+'){
                qew.add(qew.remove(qew.size()-2)+qew.remove(qew.size()-1));
            }
            else if (list.get(i) == '*'){
                qew.add(qew.remove(qew.size()-2)*qew.remove(qew.size()-1));
            }
            else if (list.get(i) == '/'){
                qew.add(qew.remove(qew.size()-2)/qew.remove(qew.size()-1));
            }
        }

    }
       return qew.get(0);
}

}
//class Stack{
//    char element;
//
//    public Stack(char element) {
//        this.element = element;
//    }
//
//    public void push(ArrayList<Object> conteiner){
//        conteiner.add(element);
//    }
//    public Character poop(ArrayList<Object> conteiner){
//        conteiner.get()
//
//    }
//}

